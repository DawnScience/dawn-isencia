/*
 * (c) Copyright 2001-2007, iSencia Belgium NV
 * All Rights Reserved.
 *
 * This software is the proprietary information of iSencia Belgium NV.
 * Use is subject to license terms.
 */
package com.isencia.passerelle.actor.v3;

import java.util.ArrayList;
import java.util.List;

import com.isencia.passerelle.core.Port;
import com.isencia.passerelle.message.ManagedMessage;

/**
 * In the new Passerelle Actor API, the ProcessResponse is a generic container
 * for all response messages, and the ports on which they should be sent,
 * that are generated by an actor by processing a received ProcessRequest.
 * <br>
 * The actor implementation can choose/combine 2 modes for sending results:
 * <ul>
 * <li>as individual messages via the addOutputMessage()/addOutputContext()
 * <li>as entries in a sequence via addOutputMessageInSequence()/addOutputContextInSequence().
 * All messages registered via these methods are sent in 1 sequence, in the order that they
 * have been added.
 * </ul>
 * @author erwin.de.ley@isencia.be
 */
public class ProcessResponse {

	private List<MessageOutputContext> outputs = new ArrayList<MessageOutputContext>();
	private List<MessageOutputContext> outputsInSequence = new ArrayList<MessageOutputContext>();

	private ProcessRequest request;

	public ProcessResponse(ProcessRequest request) {
		this.request=request;
	}

	public void addOutputMessage(int outputIndex, Port outputPort, ManagedMessage outputMsg) {
		outputs.add(new MessageOutputContext(outputIndex, outputPort, outputMsg));
	}

	public void addOutputContext(MessageOutputContext msgCtxt) {
		outputs.add(msgCtxt);
	}

	public void addOutputMessageInSequence(int outputIndex, Port outputPort, ManagedMessage outputMsg) {
		outputsInSequence.add(new MessageOutputContext(outputIndex, outputPort, outputMsg));
	}

	public void addOutputContextInSequence(MessageOutputContext msgCtxt) {
		outputsInSequence.add(msgCtxt);
	}

	public MessageOutputContext[] getOutputs() {
		return outputs.toArray(new MessageOutputContext[outputs.size()]);
	}

	public MessageOutputContext[] getOutputsInSequence() {
		return outputsInSequence.toArray(new MessageOutputContext[outputsInSequence.size()]);
	}

	public String toString() {
		StringBuffer bfr = new StringBuffer();
		MessageOutputContext[] outputs = getOutputs();
		bfr.append("\n\tIndependent msgs:");
		for (int i = 0; i < outputs.length; i++) {
			MessageOutputContext context = outputs[i];
			bfr.append("\n\t\t"+context.getPort().getName()+": msgID="+context.getMessage().getID());
		}
		outputs = getOutputsInSequence();
		bfr.append("\n\tSequenced msgs:");
		for (int i = 0; i < outputs.length; i++) {
			MessageOutputContext context = outputs[i];
			bfr.append("\n\t\t"+context.getPort().getName()+": msgID="+context.getMessage().getID());
		}
		return bfr.toString();
	}
}
