/* Copyright 2011 - iSencia Belgium NV

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package com.isencia.passerelle.actor.db.gui;

import java.awt.Window;
import java.util.NoSuchElementException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ptolemy.data.expr.Parameter;
import ptolemy.gui.CloseListener;
import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.NameDuplicationException;
import ptolemy.kernel.util.NamedObj;
import com.isencia.passerelle.actor.db.TableReader;
import com.isencia.passerelle.actor.gui.IPasserelleComponent;
import com.isencia.passerelle.actor.gui.IPasserelleQuery;
import com.isencia.passerelle.actor.gui.PasserelleQuery;
import com.isencia.util.swing.layout.AbsoluteConstraints;
import com.isencia.util.swing.layout.AbsoluteLayout;

/**
 * @author wim
 */
public class TableReaderParamEditPane extends PasserelleQuery implements IPasserelleComponent, IPasserelleQuery {

  private static final long serialVersionUID = 1L;
  /** Creates new form test */
  private NamedObj currentContainer = null;
  private static Logger logger = LoggerFactory.getLogger(TableReader.class);

  public TableReaderParamEditPane(NamedObj container, String name) throws IllegalActionException, NameDuplicationException {
    super(container);
    currentContainer = container;
    initComponents();
    fill();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  private void initComponents() { // GEN-BEGIN:initComponents

    try {
      setLayout(new AbsoluteLayout());
      queryPane = new SelectQueryPane();
      add(queryPane, new AbsoluteConstraints(10, 15, 550, 400));
    } catch (Exception e) {
      logger.error("Error initializing components", e);
    }
  } // GEN-END:initComponents

  private void fill() {

    try {
      // fill the pane with the data that's in the parameters
      Parameter param = null;

      param = (Parameter) currentContainer.getAttribute(TableReader.USER_PARAM);
      queryPane.setUser(param.getExpression());
      attachParameter(param, param.getName());
      param = (Parameter) currentContainer.getAttribute(TableReader.PASSWORD_PARAM);
      queryPane.setPassword(param.getExpression());
      attachParameter(param, param.getName());
      param = (Parameter) currentContainer.getAttribute(TableReader.DRIVER_PARAM);
      queryPane.setDriver(param.getExpression());
      attachParameter(param, param.getName());
      param = (Parameter) currentContainer.getAttribute(TableReader.URL_PARAM);
      queryPane.setUrl(param.getExpression());
      attachParameter(param, param.getName());
      param = (Parameter) currentContainer.getAttribute(TableReader.SCHEMA_PARAM);
      queryPane.setSchema(param.getExpression());
      attachParameter(param, param.getName());

      param = (Parameter) currentContainer.getAttribute(TableReader.QUERY_PARAM);
      String initQuery = param.getExpression();
      queryPane.setInitQuery(initQuery);
      attachParameter(param, param.getName());
      if (initQuery != null && initQuery.length() > 10) {
        queryPane.connect();
      }
      // param = (Parameter)currentContainer.getAttribute("query");

    } catch (Exception e) {
      logger.error("Error filling components", e);
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  SelectQueryPane queryPane = null;

  // End of variables declaration//GEN-END:variables

  /**
   * @see CloseListener#windowClosed(Window, String)
   */
  public void windowClosed(Window window, String button) {
    closed(button);
  }

  public void closed(String button) {
    if (button != null && (button.equalsIgnoreCase("OK") || button.equalsIgnoreCase("Commit"))) {

      Parameter user = (Parameter) currentContainer.getAttribute(TableReader.USER_PARAM);
      user.setExpression(queryPane.getUser());
      _notifyListeners(TableReader.USER_PARAM);

      Parameter password = (Parameter) currentContainer.getAttribute(TableReader.PASSWORD_PARAM);
      password.setExpression(queryPane.getPassword());
      _notifyListeners(TableReader.PASSWORD_PARAM);

      Parameter driver = (Parameter) currentContainer.getAttribute(TableReader.DRIVER_PARAM);
      driver.setExpression(queryPane.getDriver());
      _notifyListeners(TableReader.DRIVER_PARAM);

      Parameter url = (Parameter) currentContainer.getAttribute(TableReader.URL_PARAM);
      url.setExpression(queryPane.getUrl());
      _notifyListeners(TableReader.URL_PARAM);

      Parameter schema = (Parameter) currentContainer.getAttribute(TableReader.SCHEMA_PARAM);
      schema.setExpression(queryPane.getSchema());
      _notifyListeners(TableReader.SCHEMA_PARAM);

      Parameter query = (Parameter) currentContainer.getAttribute(TableReader.QUERY_PARAM);
      query.setExpression(queryPane.getQuery());
      _notifyListeners(TableReader.QUERY_PARAM);
    }
    queryPane.close();
  }

  @Override
  public String getStringValue(String name) throws NoSuchElementException, IllegalArgumentException {

    if (name.equals(TableReader.USER_PARAM)) {
      return queryPane.getUser();
    } else if (name.equals(TableReader.PASSWORD_PARAM)) {
      return queryPane.getPassword();
    } else if (name.equals(TableReader.DRIVER_PARAM)) {
      return queryPane.getDriver();
    } else if (name.equals(TableReader.URL_PARAM)) {
      return queryPane.getUrl();
    } else if (name.equals(TableReader.SCHEMA_PARAM)) {
      return queryPane.getSchema();
    } else if (name.equals(TableReader.QUERY_PARAM)) {
      return queryPane.getQuery();
    }

    return super.getStringValue(name);

  }

  @Override
  public void setStringValue(String name, String value) throws NoSuchElementException, IllegalArgumentException {
    if (name.equals(TableReader.USER_PARAM)) {
      queryPane.setUser(value);
    } else if (name.equals(TableReader.PASSWORD_PARAM)) {
      queryPane.setPassword(value);
    } else if (name.equals(TableReader.DRIVER_PARAM)) {
      queryPane.setDriver(value);
    } else if (name.equals(TableReader.URL_PARAM)) {
      queryPane.setUrl(value);
    } else if (name.equals(TableReader.SCHEMA_PARAM)) {
      queryPane.setSchema(value);
    } else if (name.equals(TableReader.QUERY_PARAM)) {
      queryPane.setInitQuery(value);
      if (value != null && value.length() > 10) {
        queryPane.connect();
      }
    } else {
      super.setStringValue(name, value);
    }
  }

  /**
   * Returns false : no automatic sync of parameters
   */
  @Override
  public boolean hasAutoSync() {
    return false;
  }

}